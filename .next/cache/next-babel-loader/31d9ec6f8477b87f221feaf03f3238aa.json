{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport const setUser = (store, user) => {\n  store.setState({\n    user\n  });\n};\nexport const updateUser = (store, dic) => {\n  const {\n    user\n  } = store.state;\n\n  const newDic = _objectSpread({}, user, {}, dic);\n\n  store.setState({\n    user: newDic\n  });\n};","map":{"version":3,"sources":["/home/bigeyestoad/Documents/gitRepos/challenges/upworkNextJS/utils/context/actions/global/user.js"],"names":["setUser","store","user","setState","updateUser","dic","state","newDic"],"mappings":";;;;;;AAAA,OAAO,MAAMA,OAAO,GAAG,CAACC,KAAD,EAAQC,IAAR,KAAiB;AACpCD,EAAAA,KAAK,CAACE,QAAN,CAAe;AAAED,IAAAA;AAAF,GAAf;AACH,CAFM;AAIP,OAAO,MAAME,UAAU,GAAG,CAACH,KAAD,EAAQI,GAAR,KAAgB;AACtC,QAAM;AAAEH,IAAAA;AAAF,MAAWD,KAAK,CAACK,KAAvB;;AACA,QAAMC,MAAM,qBACLL,IADK,MAELG,GAFK,CAAZ;;AAIAJ,EAAAA,KAAK,CAACE,QAAN,CAAe;AAAED,IAAAA,IAAI,EAAEK;AAAR,GAAf;AACH,CAPM","sourcesContent":["export const setUser = (store, user) => {\n    store.setState({ user });\n};\n\nexport const updateUser = (store, dic) => {\n    const { user } = store.state;\n    const newDic = {\n        ...user,\n        ...dic,\n    };\n    store.setState({ user: newDic });\n};"]},"metadata":{},"sourceType":"module"}