{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Object$create from \"@babel/runtime-corejs2/core-js/object/create\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\n// Reference: https://github.com/andregardi/use-global-hook\nfunction setState(store, newState, afterUpdateCallback) {\n  store.state = _objectSpread({}, store.state, {}, newState);\n  store.listeners.forEach(function (listener) {\n    listener.run(store.state);\n  });\n  afterUpdateCallback && afterUpdateCallback();\n}\n\nfunction useCustom(store, React, mapState, mapActions) {\n  var _React$useState = React.useState(_Object$create(null)),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      originalHook = _React$useState2[1];\n\n  var state = mapState ? mapState(store.state) : store.state;\n  var actions = React.useMemo(function () {\n    return mapActions ? mapActions(store.actions) : store.actions;\n  }, [mapActions, store.actions]);\n  React.useEffect(function () {\n    var newListener = {\n      oldState: {}\n    };\n    newListener.run = mapState ? function (newState) {\n      var mappedState = mapState(newState);\n\n      if (mappedState !== newListener.oldState) {\n        newListener.oldState = mappedState;\n        originalHook(mappedState);\n      }\n    } : originalHook;\n    store.listeners.push(newListener);\n    newListener.run(store.state);\n    return function () {\n      store.listeners = store.listeners.filter(function (listener) {\n        return listener !== newListener;\n      });\n    };\n  }, []); // eslint-disable-line\n\n  return [state, actions];\n}\n\nfunction associateActions(store, actions) {\n  var associatedActions = {};\n\n  _Object$keys(actions).forEach(function (key) {\n    if (typeof actions[key] === \"function\") {\n      associatedActions[key] = actions[key].bind(null, store);\n    }\n\n    if (typeof actions[key] === \"object\") {\n      associatedActions[key] = associateActions(store, actions[key]);\n    }\n  });\n\n  return associatedActions;\n}\n\nvar useStore = function useStore(React, initialState, actions, initializer) {\n  var store = {\n    state: initialState,\n    listeners: []\n  };\n  store.setState = setState.bind(null, store);\n  store.actions = associateActions(store, actions);\n  if (initializer) initializer(store);\n  return useCustom.bind(null, store, React);\n};\n\nexport default useStore;","map":null,"metadata":{},"sourceType":"module"}