{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n// Reference: https://github.com/andregardi/use-global-hook\nfunction setState(store, newState, afterUpdateCallback) {\n  store.state = _objectSpread({}, store.state, {}, newState);\n  store.listeners.forEach(listener => {\n    listener.run(store.state);\n  });\n  afterUpdateCallback && afterUpdateCallback();\n}\n\nfunction useCustom(store, React, mapState, mapActions) {\n  const [, originalHook] = React.useState(Object.create(null));\n  const state = mapState ? mapState(store.state) : store.state;\n  const actions = React.useMemo(() => mapActions ? mapActions(store.actions) : store.actions, [mapActions, store.actions]);\n  React.useEffect(() => {\n    const newListener = {\n      oldState: {}\n    };\n    newListener.run = mapState ? newState => {\n      const mappedState = mapState(newState);\n\n      if (mappedState !== newListener.oldState) {\n        newListener.oldState = mappedState;\n        originalHook(mappedState);\n      }\n    } : originalHook;\n    store.listeners.push(newListener);\n    newListener.run(store.state);\n    return () => {\n      store.listeners = store.listeners.filter(listener => listener !== newListener);\n    };\n  }, []); // eslint-disable-line\n\n  return [state, actions];\n}\n\nfunction associateActions(store, actions) {\n  const associatedActions = {};\n  Object.keys(actions).forEach(key => {\n    if (typeof actions[key] === \"function\") {\n      associatedActions[key] = actions[key].bind(null, store);\n    }\n\n    if (typeof actions[key] === \"object\") {\n      associatedActions[key] = associateActions(store, actions[key]);\n    }\n  });\n  return associatedActions;\n}\n\nconst useStore = (React, initialState, actions, initializer) => {\n  const store = {\n    state: initialState,\n    listeners: []\n  };\n  store.setState = setState.bind(null, store);\n  store.actions = associateActions(store, actions);\n  if (initializer) initializer(store);\n  return useCustom.bind(null, store, React);\n};\n\nexport default useStore;","map":null,"metadata":{},"sourceType":"module"}