{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bigeyestoad/Documents/gitRepos/challenges/upworkNextJS/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport useGlobal from \"../utils/context/store/global\";\n\nvar Home = function Home() {\n  // TODO: Create local state for first name which will change only on this page. It should also be able to update with global state.\n  var _useGlobal = useGlobal(),\n      _useGlobal2 = _slicedToArray(_useGlobal, 2),\n      globalState = _useGlobal2[0],\n      globalActions = _useGlobal2[1];\n\n  var _globalState$user = globalState.user,\n      name_first = _globalState$user.name_first,\n      name_last = _globalState$user.name_last;\n  var _globalActions$user = globalActions.user,\n      setUser = _globalActions$user.setUser,\n      updateUser = _globalActions$user.updateUser;\n\n  var _useState = useState({\n    name_first: name_first\n  }),\n      values = _useState[0],\n      setValues = _useState[1];\n  /** TODO: Change first or last name which should show across website.\n   * i.e. Create text field that will change global state ALSO with local state on this page.\n   *\n   * This is a small example on how globalActions should be used.*/\n  // const handleNameChange = (event) => {\n  //   const value = event.target.value\n  //   globalActions.user.updateUser({[event.target.name]:value});\n  // }\n  // TODO: Create useEffect to change the last name ONCE upon showing this page.\n\n\n  useEffect(function () {\n    setValues(_objectSpread({}, values, _defineProperty({}, \"name_last\", name_last)));\n  }, []);\n\n  var handleInputChange = function handleInputChange(label) {\n    return function (event) {\n      var value = event.target.value;\n      setValues(_objectSpread({}, values, _defineProperty({}, label, value)));\n\n      if (label === \"name_first\") {\n        globalActions.user.updateUser(_defineProperty({}, label, value));\n      }\n    };\n  };\n\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, \"Hello World!\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, \"Name (GlobalState): \", name_first, \", \", name_last), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49\n    },\n    __self: this\n  }, \"Name (LocalState): \", values.name_first, \", \", values.name_last), __jsx(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, \"First Name\"), \" \", __jsx(\"input\", {\n    onChange: handleInputChange(\"name_first\"),\n    value: values.name_first,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62\n    },\n    __self: this\n  }, \"Last Name\"), \" \", __jsx(\"input\", {\n    onChange: handleInputChange(\"name_last\"),\n    value: values.name_last,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/bigeyestoad/Documents/gitRepos/challenges/upworkNextJS/pages/index.js"],"names":["React","useEffect","useState","Header","useGlobal","Home","globalState","globalActions","user","name_first","name_last","setUser","updateUser","values","setValues","handleInputChange","label","event","value","target"],"mappings":";;;;;;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;AAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;AACjB;AADiB,mBAGoBD,SAAS,EAH7B;AAAA;AAAA,MAGVE,WAHU;AAAA,MAGGC,aAHH;;AAAA,0BAMbD,WANa,CAKfE,IALe;AAAA,MAKPC,UALO,qBAKPA,UALO;AAAA,MAKKC,SALL,qBAKKA,SALL;AAAA,4BASbH,aATa,CAQfC,IARe;AAAA,MAQPG,OARO,uBAQPA,OARO;AAAA,MAQEC,UARF,uBAQEA,UARF;;AAAA,kBAWWV,QAAQ,CAAC;AACnCO,IAAAA,UAAU,EAAVA;AADmC,GAAD,CAXnB;AAAA,MAWVI,MAXU;AAAA,MAWFC,SAXE;AAajB;;;;AAKA;AACA;AACA;AACA;AAEA;;;AAEAb,EAAAA,SAAS,CAAC,YAAM;AACda,IAAAA,SAAS,mBAAMD,MAAN,sBAAe,WAAf,EAA6BH,SAA7B,GAAT;AACD,GAFQ,EAEN,EAFM,CAAT;;AAIA,MAAMK,iBAAiB,GAAG,SAApBA,iBAAoB,CAAAC,KAAK;AAAA,WAAI,UAAAC,KAAK,EAAI;AAC1C,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAJ,MAAAA,SAAS,mBAAMD,MAAN,sBAAeG,KAAf,EAAuBE,KAAvB,GAAT;;AACA,UAAIF,KAAK,KAAK,YAAd,EAA4B;AAC1BT,QAAAA,aAAa,CAACC,IAAd,CAAmBI,UAAnB,qBAAiCI,KAAjC,EAAyCE,KAAzC;AACD;AACF,KAN8B;AAAA,GAA/B;;AAQA,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6BACuBT,UADvB,QACqCC,SADrC,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BACsBG,MAAM,CAACJ,UAD7B,QAC2CI,MAAM,CAACH,SADlD,CANF,EASE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,EAUE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAC4B,GAD5B,EAEE;AACE,IAAA,QAAQ,EAAEK,iBAAiB,CAAC,YAAD,CAD7B;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACJ,UAFhB;AAGE,IAAA,IAAI,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAVF,EAkBE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAC2B,GAD3B,EAEE;AACE,IAAA,QAAQ,EAAEM,iBAAiB,CAAC,WAAD,CAD7B;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACH,SAFhB;AAGE,IAAA,IAAI,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAlBF,CADF;AA6BD,CAlED;;AAoEA,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport useGlobal from \"../utils/context/store/global\";\n\nconst Home = () => {\n  // TODO: Create local state for first name which will change only on this page. It should also be able to update with global state.\n\n  const [globalState, globalActions] = useGlobal();\n  const {\n    user: { name_first, name_last }\n  } = globalState;\n  const {\n    user: { setUser, updateUser }\n  } = globalActions;\n\n  const [values, setValues] = useState({\n    name_first  });\n  /** TODO: Change first or last name which should show across website.\n   * i.e. Create text field that will change global state ALSO with local state on this page.\n   *\n   * This is a small example on how globalActions should be used.*/\n\n  // const handleNameChange = (event) => {\n  //   const value = event.target.value\n  //   globalActions.user.updateUser({[event.target.name]:value});\n  // }\n\n  // TODO: Create useEffect to change the last name ONCE upon showing this page.\n\n  useEffect(() => {\n    setValues({ ...values, [\"name_last\"]: name_last });\n  }, []);\n\n  const handleInputChange = label => event => {\n    const value = event.target.value;\n    setValues({ ...values, [label]: value });\n    if (label === \"name_first\") {\n      globalActions.user.updateUser({ [label]: value });\n    }\n  };\n\n  return (\n    <>\n      <Header />\n      <h1>Hello World!</h1>\n      <p>\n        Name (GlobalState): {name_first}, {name_last}\n      </p>\n      <p>\n        Name (LocalState): {values.name_first}, {values.name_last}\n      </p>\n      <hr />\n      <div>\n        <label>First Name</label>{\" \"}\n        <input\n          onChange={handleInputChange(\"name_first\")}\n          value={values.name_first}\n          type=\"text\"\n        />\n      </div>\n      <div>\n        <label>Last Name</label>{\" \"}\n        <input\n          onChange={handleInputChange(\"name_last\")}\n          value={values.name_last}\n          type=\"text\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}