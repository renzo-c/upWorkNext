{"ast":null,"code":"var _jsxFileName = \"/home/bigeyestoad/Documents/gitRepos/challenges/upworkNextJS/pages/index.js\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport useGlobal from \"../utils/context/store/global\";\n\nconst Home = () => {\n  // TODO: Create local state for first name which will change only on this page. It should also be able to update with global state.\n  const [globalState, globalActions] = useGlobal();\n  const {\n    user: {\n      name_first,\n      name_last\n    }\n  } = globalState;\n  const {\n    user: {\n      setUser,\n      updateUser\n    }\n  } = globalActions;\n  const {\n    0: values,\n    1: setValues\n  } = useState({\n    name_first,\n    name_last\n  });\n  /** TODO: Change first or last name which should show across website.\n   * i.e. Create text field that will change global state ALSO with local state on this page.\n   *\n   * This is a small example on how globalActions should be used.*/\n  // const handleNameChange = (event) => {\n  //   const value = event.target.value\n  //   globalActions.user.updateUser({[event.target.name]:value});\n  // }\n  // TODO: Create useEffect to change the last name ONCE upon showing this page.\n\n  const handleInputChange = label => event => {\n    const value = event.target.value;\n    setValues(_objectSpread({}, values, {\n      [label]: value\n    }));\n    globalActions.user.updateUser({\n      [label]: value\n    });\n  };\n\n  console.log(values);\n  return __jsx(React.Fragment, null, __jsx(Header, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 40\n    },\n    __self: this\n  }), __jsx(\"h1\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 41\n    },\n    __self: this\n  }, \"Hello World!\"), __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Name: \", name_first, \", \", name_last), __jsx(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"First Name\"), \" \", __jsx(\"input\", {\n    onChange: handleInputChange(\"name_first\"),\n    value: values.name_first,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  })), __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54\n    },\n    __self: this\n  }, __jsx(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55\n    },\n    __self: this\n  }, \"Last Name\"), \" \", __jsx(\"input\", {\n    onChange: handleInputChange(\"name_last\"),\n    value: values.name_last,\n    type: \"text\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56\n    },\n    __self: this\n  })));\n};\n\nexport default Home;","map":{"version":3,"sources":["/home/bigeyestoad/Documents/gitRepos/challenges/upworkNextJS/pages/index.js"],"names":["React","useEffect","useState","Header","useGlobal","Home","globalState","globalActions","user","name_first","name_last","setUser","updateUser","values","setValues","handleInputChange","label","event","value","target","console","log"],"mappings":";;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,sBAAnB;AACA,OAAOC,SAAP,MAAsB,+BAAtB;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACjB;AAEA,QAAM,CAACC,WAAD,EAAcC,aAAd,IAA+BH,SAAS,EAA9C;AACA,QAAM;AACJI,IAAAA,IAAI,EAAE;AAAEC,MAAAA,UAAF;AAAcC,MAAAA;AAAd;AADF,MAEFJ,WAFJ;AAGA,QAAM;AACJE,IAAAA,IAAI,EAAE;AAAEG,MAAAA,OAAF;AAAWC,MAAAA;AAAX;AADF,MAEFL,aAFJ;AAIA,QAAM;AAAA,OAACM,MAAD;AAAA,OAASC;AAAT,MAAsBZ,QAAQ,CAAC;AACnCO,IAAAA,UADmC;AAEnCC,IAAAA;AAFmC,GAAD,CAApC;AAIA;;;;AAKA;AACA;AACA;AACA;AAEA;;AAEA,QAAMK,iBAAiB,GAAGC,KAAK,IAAIC,KAAK,IAAI;AAC1C,UAAMC,KAAK,GAAGD,KAAK,CAACE,MAAN,CAAaD,KAA3B;AACAJ,IAAAA,SAAS,mBAAMD,MAAN;AAAc,OAACG,KAAD,GAASE;AAAvB,OAAT;AACAX,IAAAA,aAAa,CAACC,IAAd,CAAmBI,UAAnB,CAA8B;AAAE,OAACI,KAAD,GAASE;AAAX,KAA9B;AACD,GAJD;;AAKAE,EAAAA,OAAO,CAACC,GAAR,CAAYR,MAAZ;AACA,SACE,4BACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eACSJ,UADT,QACuBC,SADvB,CAHF,EAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAOE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,EAC4B,GAD5B,EAEE;AACE,IAAA,QAAQ,EAAEK,iBAAiB,CAAC,YAAD,CAD7B;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACJ,UAFhB;AAGE,IAAA,IAAI,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAPF,EAeE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,EAC2B,GAD3B,EAEE;AACE,IAAA,QAAQ,EAAEM,iBAAiB,CAAC,WAAD,CAD7B;AAEE,IAAA,KAAK,EAAEF,MAAM,CAACH,SAFhB;AAGE,IAAA,IAAI,EAAC,MAHP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CAfF,CADF;AA0BD,CA3DD;;AA6DA,eAAeL,IAAf","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport Header from \"../components/header\";\nimport useGlobal from \"../utils/context/store/global\";\n\nconst Home = () => {\n  // TODO: Create local state for first name which will change only on this page. It should also be able to update with global state.\n\n  const [globalState, globalActions] = useGlobal();\n  const {\n    user: { name_first, name_last }\n  } = globalState;\n  const {\n    user: { setUser, updateUser }\n  } = globalActions;\n\n  const [values, setValues] = useState({\n    name_first,\n    name_last\n  });\n  /** TODO: Change first or last name which should show across website.\n   * i.e. Create text field that will change global state ALSO with local state on this page.\n   *\n   * This is a small example on how globalActions should be used.*/\n\n  // const handleNameChange = (event) => {\n  //   const value = event.target.value\n  //   globalActions.user.updateUser({[event.target.name]:value});\n  // }\n\n  // TODO: Create useEffect to change the last name ONCE upon showing this page.\n\n  const handleInputChange = label => event => {\n    const value = event.target.value;\n    setValues({ ...values, [label]: value });\n    globalActions.user.updateUser({ [label]: value });\n  };\n  console.log(values);\n  return (\n    <>\n      <Header />\n      <h1>Hello World!</h1>\n      <p>\n        Name: {name_first}, {name_last}\n      </p>\n      <hr />\n      <div>\n        <label>First Name</label>{\" \"}\n        <input\n          onChange={handleInputChange(\"name_first\")}\n          value={values.name_first}\n          type=\"text\"\n        />\n      </div>\n      <div>\n        <label>Last Name</label>{\" \"}\n        <input\n          onChange={handleInputChange(\"name_last\")}\n          value={values.name_last}\n          type=\"text\"\n        />\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}