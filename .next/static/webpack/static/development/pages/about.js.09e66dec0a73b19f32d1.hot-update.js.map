{"version":3,"file":"static/webpack/static/development/pages/about.js.09e66dec0a73b19f32d1.hot-update.js","sources":["webpack:///./utils/context/index.js"],"sourcesContent":["// Reference: https://github.com/andregardi/use-global-hook\n\nfunction setState(store, newState, afterUpdateCallback) {\n  console.log(store, newState, afterUpdateCallback);\n    store.state = { ...store.state, ...newState };\n    store.listeners.forEach((listener) => {\n      listener.run(store.state);\n    });\n    afterUpdateCallback && afterUpdateCallback();\n  }\n  \n  function useCustom(store, React, mapState, mapActions) {\n    const [, originalHook] = React.useState(Object.create(null));\n    const state = mapState ? mapState(store.state) : store.state;\n    const actions = React.useMemo(\n      () => (mapActions ? mapActions(store.actions) : store.actions),\n      [mapActions, store.actions]\n    );\n  \n    React.useEffect(() => {\n      const newListener = { oldState: {} };\n      newListener.run = mapState\n        ? newState => {\n            const mappedState = mapState(newState);\n            if (mappedState !== newListener.oldState) {\n              newListener.oldState = mappedState;\n              originalHook(mappedState);\n            }\n          }\n        : originalHook;\n      store.listeners.push(newListener);\n      newListener.run(store.state);\n      return () => {\n        store.listeners = store.listeners.filter(\n          listener => listener !== newListener\n        );\n      };\n    }, []); // eslint-disable-line\n    return [state, actions];\n  }\n  \n  function associateActions(store, actions) {\n    const associatedActions = {};\n    Object.keys(actions).forEach(key => {\n      if (typeof actions[key] === \"function\") {\n        associatedActions[key] = actions[key].bind(null, store);\n      }\n      if (typeof actions[key] === \"object\") {\n        associatedActions[key] = associateActions(store, actions[key]);\n      }\n    });\n    return associatedActions;\n  }\n  \n  const useStore = (React, initialState, actions, initializer) => {\n    const store = { state: initialState, listeners: [] };\n    store.setState = setState.bind(null, store);\n    store.actions = associateActions(store, actions);\n    if (initializer) initializer(store);\n    return useCustom.bind(null, store, React);\n  };\n  \n  export default useStore;"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAIA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;A","sourceRoot":""}